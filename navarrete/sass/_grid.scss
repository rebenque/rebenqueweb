// ___________________________________
//
// Grid
// ___________________________________

/* ---- Fixed vars (particularization)---- */

$fixed-row: false;

@if $fixed-row {
  $grid-direction: row;
}

/* ---- Cooking ---- */

$rel-uc: vw;
$rel-u: $rel-uc;
@if $grid-direction == column {
  $rel-uc: vh;
  $rel-u: $rel-uc;
}
@if $fixed-row {
  $rel-u: '%';
}

$array-length-adim:           ( $container-length-adim -
                        ( 2 * ( $array-margin-adim ) ) );
$array-cross-base-length-adim:     ($array-length-adim / $grid-divisions);

$stcont-padding-star-adim: ($cell-cross-margin-adim + $array-padding-adim);

/* ---- Functions --- */

@function cell-length-base-adim-calculation($divisions) {
  $aux: ( ($divisions * 2) * $cell-main-margin-adim );
  $cell-length-base-adim: ( ( $container-length-adim - $aux ) /
                       ( $divisions ) );
  @return $cell-length-base-adim;
}

@function cell-s-length-adim-calculation($division, $length-base-adim) {
  $cell-s-length-adim: ( $length-base-adim      *  $division      )
                     + ( 2 * $cell-main-margin-adim * ($division - 1) );
  @return $cell-s-length-adim;
}

@function cell-cross-length-adim-calculation($length-adim) {
    $cell-cross-length-adim: ($length-adim * $cell-aspect-ratio);
  @return $cell-cross-length-adim;
}


/* ---- Mixin --- */

@mixin v_or_h($val) {
  @if $grid-direction == column {
    height: $val;
  } @else {
    width: $val;
  }
}

@mixin v_or_h_cross($val) {
  @if $grid-direction == column {
    width: $val !important;
    //width: TODO:The number of times the column wraps can be only known trhough jQuery
  } @else {
    height: $val !important;
  }
}


/* ---- Dimensioning ---- */

$grid-unit:                     #{$grid-unit-adim}#{$rel-u};

$container-length:              #{$container-length-adim}#{$rel-uc};
$array-length:                  #{$array-length-adim}#{$rel-u};

//$array-border:                  #{$array-border-adim}#{$rel-u};
$array-padding:                 #{$array-padding-adim}#{$rel-u};
$array-margin:                  #{$array-margin-adim}#{$rel-u};

$stcont-padding-star:           #{$stcont-padding-star-adim}#{$rel-u};

//$cell-border:                   #{$cell-border-adim}#{$rel-u};
$cell-main-padding:             #{$cell-main-padding-adim}#{$rel-u};
$cell-cross-padding:            #{$cell-cross-padding-adim}#{$rel-u};
$cell-main-margin:              #{$cell-main-margin-adim}#{$rel-u};
$cell-cross-margin:             #{$cell-cross-margin-adim}#{$rel-u};

$cell-length-base-adim: cell-length-base-adim-calculation($grid-divisions);
$cell-length-base:              #{$cell-length-base-adim}#{$rel-u};

$cell-cross-length-adim: cell-cross-length-adim-calculation($cell-length-base-adim);
$cell-cross-length:             #{$cell-cross-length-adim}#{$rel-uc};
$cell-cross-length:             #{$cell-cross-length-adim}#{$rel-uc};

$array-cross-length:            auto;
@if $cross-length-for-array == true  {
  $array-cross-length-adim: $cell-cross-length-adim
                     + ( 2 * $cell-cross-margin-adim )
                     + ( 2 * $array-padding-adim );
                     // array border cannot be taken into account, css limitation

  $array-cross-length: #{$array-cross-length-adim * $array-aspect-ratio}#{$rel-uc};
}

$cell-pack-base-length-adim: ( $cell-length-base-adim +
                              (2 * $cell-main-margin-adim) );
$offset-adim: ();
$cell-s-length: ();
$cell-s-length: ();
$cell-s-cross-length: ();
$offset: ();
$i: 1;
@for $i from 1 through $grid-divisions {
  $cell-s-length-adim: cell-s-length-adim-calculation($i,$cell-length-base-adim);
  @if $cell-aspect-ratio == auto {
    $cell-s-cross-length: append( $cell-s-cross-length, "auto" );
  } @else {
    $cell-s-cross-length-adim: cell-cross-length-adim-calculation($cell-s-length-adim);
    $cell-s-cross-length: append( $cell-s-cross-length, #{$cell-s-cross-length-adim}#{$rel-uc} );
    //$cell-s-cross-length: append( $cell-s-cross-length, #{$cell-s-cross-length-adim}vw );
  }

  $list-element: $cell-main-margin-adim
             + ( $cell-pack-base-length-adim * $i );
  $offset-adim: append( $offset-adim, $list-element );
  $cell-s-length: append( $cell-s-length, #{$cell-s-length-adim}#{$rel-u} );
  $offset: append( $offset, #{ nth($offset-adim,$i) }#{$rel-u} );
}



/* ---- Container --- */
/* The rbq-container is not nestable */
// In vw or vh

.rbq-container {
  padding:                0;
  border:                 0;
  margin:                 0;
  @include flexbox;
  @include flex-direction($grid-direction);
  @include flex-wrap(     wrap);
  @include v_or_h(        $container-length);
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  //align-items:            stretch;
  //align-content:          flex-start;
  //overflow:               $array-overflow;
}

/* ---- Array --- */

.rbq-array {
  padding:                $array-padding;
  border:                 $array-border solid $grid-border-color;
  margin:                 $array-margin;
  // @if $grid-direction == column {
  //   margin-right:         0;
  // } @else {
  //   margin-bottom:        0;
  // }
  @include flexbox;
  @include flex-direction($grid-direction);
  @include flex-wrap(     wrap);
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  //align-items:            stretch;
  //align-content:          flex-start;
  overflow:               $array-overflow;
  @include       flex(0 0 $array-length);
  @if $cross-length-for-array {
    @include v_or_h_cross($array-cross-length);
  }
  // For nested auto cells. Only working in row direction
  .rbq-array{
    @include v_or_h_cross( auto );
  }
}
// .rbq-array:first-of-type {
//   @if $first-array-offset {
//     @if $grid-direction == column {
//       padding-left: $stcont-padding-star;
//     } @else {
//       padding-top:  $stcont-padding-star;
//     }
//   }
// }
// .rbq-array:last-of-type {
//   @if $grid-direction == column {
//     margin-right: $array-margin;
//   } @else {
//     margin-bottom:  $array-margin;
//   }
//   @if $last-array-offset {
//     @if $grid-direction == column {
//       padding-right: $stcont-padding-star;
//     } @else {
//       padding-bottom:  $stcont-padding-star;
//     }
//   }
// }

/* ---- Cell --- */

// -- Auto length cells

.rbq-cell-xs, .rbq-dar-cell-xs {
  //@include flexbox;
  @include         flex(1 0 0%);
  border:          $cell-border solid $grid-border-color;
  //padding:         $cell-padding;
  @if $grid-direction == column {
    padding:       $cell-main-padding
                   $cell-cross-padding;
    margin:        $cell-main-margin
                   $cell-cross-margin;
    //margin-bottom: 0;
  } @else {
    padding:       $cell-cross-padding
                   $cell-main-padding;
    margin:        $cell-cross-margin
                   $cell-main-margin;
    //margin-right:  0;
  }
  overflow:        $cell-overflow;
  // For nested auto cells
  .rbq-dar-cell-xs {
    @include v_or_h_cross(auto);
  }
}
// .rbq-cell-xs:last-child, .rbq-dar-cell-xs:last-child {
//   @if $grid-direction == column {
//     margin-bottom: $cell-main-margin;
//   } @else {
//     margin-right:  $cell-main-margin;
//   }
// }
.rbq-dar-cell-xs {
  @include v_or_h_cross($cell-cross-length);
}

// -- Specific length cells

$i: 1;
@for $i from 1 through $grid-divisions {
  .rbq-cell-xs-#{$i}, .rbq-dar-cell-xs-#{$i} {
    @include flex( 0 0        nth($cell-s-length,$i) );
    border:                   $cell-border solid $grid-border-color;
    //padding:                  $cell-padding;
    @if $grid-direction == column {
      padding:       $cell-main-padding
                     $cell-cross-padding;
      margin:        $cell-main-margin
                     $cell-cross-margin;
      //margin-bottom: 0;
    } @else {
      padding:       $cell-cross-padding
                     $cell-main-padding;
      margin:        $cell-cross-margin
                     $cell-main-margin;
      //margin-right:  0;
    }
    overflow:                 $cell-overflow;
    // $j: 1;
    // @for $j from 1 through $grid-divisions {
    //   .rbq-dar-cell-xs-#{$j} {
    //     @include v_or_h_cross(auto);
    //   }
    // }
  }
  // .rbq-cell-xs-#{$i}:last-child, .rbq-dar-cell-xs-#{$i}:last-child {
  //   @if $grid-direction == column {
  //     margin-bottom:  $cell-main-margin;
  //   } @else {
  //     margin-right:   $cell-main-margin;
  //   }
  // }
  .rbq-dar-cell-xs-#{$i} {
    @if $s-cell-cross-length-equal-to-base-cell {
      @include v_or_h_cross(  $cell-cross-length );
    } @else {
      @include v_or_h_cross(  nth($cell-s-cross-length,$i) );
    }
  }
  .rbq-offset-xs-#{$i} {
    @if $grid-direction == column {
      margin-top:   nth($offset,$i) !important;
    } @else {
      margin-left:  nth($offset,$i) !important;
    }
  }
  .rbq-fixed-xs-#{$i} {
    position: fixed;
    @include v_or_h(nth( $cell-s-length,$i) );
  }
}

/* ---- Allignment --- */

.start-xs {
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  text-align: start;
}

.center-xs {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  text-align: center;
}

.end-xs {
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
      -ms-flex-pack: end;
          justify-content: flex-end;
  text-align: end;
}

.top-xs {
  -webkit-box-align: start;
  -webkit-align-items: flex-start;
      -ms-flex-align: start;
          align-items: flex-start;
}

.middle-xs {
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
}

.bottom-xs {
  -webkit-box-align: end;
  -webkit-align-items: flex-end;
      -ms-flex-align: end;
          align-items: flex-end;
}

.cell-top-xs {
  -webkit-align-self: flex-start;
      -ms-flex-item-align: start;
          align-self: flex-start;
}

.cell-middle-xs {
  -webkit-align-self: center;
      -ms-flex-item-align: center;
          align-self: center;
}

.cell-bottom-xs {
  -webkit-align-self: flex-end;
      -ms-flex-item-align: end;
          align-self: flex-end;
}


/* ---- Distribution --- */

.around-xs {
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around;
}

.between-xs {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

/* ---- Order --- */

.first-xs {
  @include order( -1 );
}


.last-xs {
  @include order(1);
}

/**************************/
/* Loop for media queries */
/**************************/

$screen-sizes: ( $screen-sm,
                 $screen-md,
                 $screen-lg
               );
$screen-suffixes: ( sm,
                    md,
                    lg
                  );
$ss: 1;
@each $screen-suffix in $screen-suffixes {


  /* ---- Cell --- */

  // -- Auto length cells

  @media (min-width: nth($screen-sizes,$ss) ) {
    .rbq-cell-#{$screen-suffix}, .rbq-dar-cell-#{$screen-suffix} {
      //@include flexbox;
      @include         flex(1 0 0%);
      border:          $cell-border solid $grid-border-color;
      //padding:         $cell-padding;
      @if $grid-direction == column {
        padding:       $cell-main-padding
                       $cell-cross-padding;
        margin:        $cell-main-margin
                       $cell-cross-margin;
        //margin-bottom: 0;
      } @else {
        padding:       $cell-cross-padding
                       $cell-main-padding;
        margin:        $cell-cross-margin
                       $cell-main-margin;
        //margin-right:  0;
      }
      overflow:        $cell-overflow;
      // For nested auto cells
      .rbq-dar-cell-#{$screen-suffix} {
        @include v_or_h_cross(auto);
      }
    }
    // .rbq-cell-#{$screen-suffix}:last-child, .rbq-dar-cell-#{$screen-suffix}:last-child {
    //   @if $grid-direction == column {
    //     margin-bottom: $cell-main-margin;
    //   } @else {
    //     margin-right:  $cell-main-margin;
    //   }
    // }
    .rbq-dar-cell-#{$screen-suffix} {
      @include v_or_h_cross($cell-cross-length);
    }

    // -- Specific length cells

    $i: 1;
    @for $i from 1 through $grid-divisions {
      .rbq-cell-#{$screen-suffix}-#{$i}, .rbq-dar-cell-#{$screen-suffix}-#{$i}  {
        @include flex( 0 0        nth($cell-s-length,$i) );
        border:                   $cell-border solid $grid-border-color;
        //padding:                  $cell-padding;
        @if $grid-direction == column {
          padding:       $cell-main-padding
                         $cell-cross-padding;
          margin:        $cell-main-margin
                         $cell-cross-margin;
          //margin-bottom: 0;
        } @else {
          padding:       $cell-cross-padding
                         $cell-main-padding;
          margin:        $cell-cross-margin
                         $cell-main-margin;
          //margin-right:  0;
        }
        overflow:                 $cell-overflow;
        // $j: 1;
        // @for $j from 1 through $grid-divisions {
        //   .rbq-dar-cell-#{$screen-suffix}-#{$j} {
        //     @include v_or_h_cross(auto);
        //   }
        // }
      }
      // .rbq-cell-#{$screen-suffix}-#{$i}:last-child, .rbq-dar-cell-#{$screen-suffix}-#{$i}:last-child {
      //   @if $grid-direction == column {
      //     margin-bottom:  $cell-main-margin;
      //   } @else {
      //     margin-right:   $cell-main-margin;
      //   }
      // }
      .rbq-dar-cell-#{$screen-suffix}-#{$i} {
        @if $s-cell-cross-length-equal-to-base-cell {
          @include v_or_h_cross(  $cell-cross-length );
        } @else {
          @include v_or_h_cross(  nth($cell-s-cross-length,$i) );
        }
      }
      .rbq-offset-#{$screen-suffix}-#{$i} {
        @if $grid-direction == column {
          margin-top:   nth($offset,$i) !important;
        } @else {
          margin-left:  nth($offset,$i) !important;
        }
      }
      .rbq-fixed-#{$screen-suffix}-#{$i} {
        position: fixed;
        @include v_or_h(nth( $cell-s-length,$i) );
      }
    }

    /* ---- Allignment --- */

    .start-#{$screen-suffix} {
      -webkit-box-pack: start;
      -webkit-justify-content: flex-start;
          -ms-flex-pack: start;
              justify-content: flex-start;
      text-align: start;
    }

    .center-#{$screen-suffix} {
      -webkit-box-pack: center;
      -webkit-justify-content: center;
          -ms-flex-pack: center;
              justify-content: center;
      text-align: center;
    }

    .end-#{$screen-suffix} {
      -webkit-box-pack: end;
      -webkit-justify-content: flex-end;
          -ms-flex-pack: end;
              justify-content: flex-end;
      text-align: end;
    }

    .top-#{$screen-suffix} {
      -webkit-box-align: start;
      -webkit-align-items: flex-start;
          -ms-flex-align: start;
              align-items: flex-start;
    }

    .middle-#{$screen-suffix} {
      -webkit-box-align: center;
      -webkit-align-items: center;
          -ms-flex-align: center;
              align-items: center;
    }

    .bottom-#{$screen-suffix} {
      -webkit-box-align: end;
      -webkit-align-items: flex-end;
          -ms-flex-align: end;
              align-items: flex-end;
    }

    .cell-top-#{$screen-suffix} {
      -webkit-align-self: flex-start;
          -ms-flex-item-align: start;
              align-self: flex-start;
    }

    .cell-middle-#{$screen-suffix} {
      -webkit-align-self: center;
          -ms-flex-item-align: center;
              align-self: center;
    }

    .cell-bottom-#{$screen-suffix} {
      -webkit-align-self: flex-end;
          -ms-flex-item-align: end;
              align-self: flex-end;
    }


    /* ---- Distribution --- */

    .around-#{$screen-suffix} {
      -webkit-justify-content: space-around;
          -ms-flex-pack: distribute;
              justify-content: space-around;
    }

    .between-#{$screen-suffix} {
      -webkit-box-pack: justify;
      -webkit-justify-content: space-between;
          -ms-flex-pack: justify;
              justify-content: space-between;
    }
    /* ---- Order --- */

    .first-#{$screen-suffix} {
      @include order( -1 );
    }


    .last-#{$screen-suffix} {
      @include order(1);
    }


  }
  $ss: ( $ss + 1 );
}


/* ---- Visibility --- */

.hidden-xs {
  @media (max-width: $screen-xs-max) {
    display: none !important;
  }
}
.hidden-sm {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: none !important;
  }
}
.hidden-md {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: none !important;
  }
}
.hidden-lg {
  @media (min-width: $screen-lg-min) {
    display: none !important;
  }
}
